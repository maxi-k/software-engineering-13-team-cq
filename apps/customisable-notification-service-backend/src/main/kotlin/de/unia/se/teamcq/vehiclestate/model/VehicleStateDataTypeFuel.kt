package de.unia.se.teamcq.vehiclestate.model

import de.unia.se.teamcq.ruleevaluation.model.EvaluationStrategies
import de.unia.se.teamcq.ruleevaluation.model.FieldDataType
import de.unia.se.teamcq.ruleevaluation.model.PredicateField
import org.springframework.stereotype.Component

@Component
// Constructor with (null)-default values for everything necessary for MapStruct
class VehicleStateDataTypeFuel(

    var levelPercentage: Double? = null,

    var levelLiters: Int? = null,

    var tankCapacity: Double? = null,

    var remainingRange: Int? = null,

    dataTypeId: Long? = null

) : VehicleStateDataType(dataTypeId) {

    override val predicateFieldProviderName: String = PREDICATE_FIELD_PROVIDER_NAME

    override val predicateFields: Map<String, PredicateField> = PREDICATE_FIELDS

    @Throws(IllegalArgumentException::class)
    override fun retrieveFieldValue(fieldName: String): Any? {
        return when (fieldName) {
            "levelPercentage" -> this.levelPercentage
            "levelLiters" -> this.levelLiters
            "tankCapacity" -> this.tankCapacity
            "remainingRange" -> this.remainingRange
            else -> super.retrieveFieldValue(fieldName)
        }
    }

    // Autogenerated
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is VehicleStateDataTypeFuel) return false
        if (!super.equals(other)) return false

        if (levelPercentage != other.levelPercentage) return false
        if (levelLiters != other.levelLiters) return false
        if (tankCapacity != other.tankCapacity) return false
        if (remainingRange != other.remainingRange) return false
        if (predicateFieldProviderName != other.predicateFieldProviderName) return false
        if (predicateFields != other.predicateFields) return false

        return true
    }

    // Autogenerated
    override fun hashCode(): Int {
        var result = super.hashCode()
        result = 31 * result + (levelPercentage?.hashCode() ?: 0)
        result = 31 * result + (levelLiters ?: 0)
        result = 31 * result + (tankCapacity?.hashCode() ?: 0)
        result = 31 * result + (remainingRange ?: 0)
        result = 31 * result + predicateFieldProviderName.hashCode()
        result = 31 * result + predicateFields.hashCode()
        return result
    }

    companion object {
        const val PREDICATE_FIELD_PROVIDER_NAME = "Fuel"
        val PREDICATE_FIELDS = mapOf(
            "levelPercentage" to PredicateField("levelPercentage", FieldDataType.PERCENTAGE_DECIMAL, EvaluationStrategies.NUMERIC),
            "levelLiters" to PredicateField("levelLiters", FieldDataType.LITER, EvaluationStrategies.NUMERIC),
            "tankCapacity" to PredicateField("tankCapacity", FieldDataType.LITER, EvaluationStrategies.NUMERIC),
            "remainingRange" to PredicateField("remainingRange", FieldDataType.KILOMETER, EvaluationStrategies.NUMERIC)
        )
    }
}
