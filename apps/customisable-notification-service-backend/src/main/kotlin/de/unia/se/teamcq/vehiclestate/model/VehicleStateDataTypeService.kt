package de.unia.se.teamcq.vehiclestate.model

import de.unia.se.teamcq.ruleevaluation.model.EvaluationStrategies
import de.unia.se.teamcq.ruleevaluation.model.FieldDataType
import de.unia.se.teamcq.ruleevaluation.model.PredicateField
import org.springframework.stereotype.Component

@Component
// Constructor with (null)-default values for everything necessary for MapStruct
class VehicleStateDataTypeService(

    var status: String? = null,

    var dueDate: String? = null,

    var remainingDays: Int? = null,

    var remainingMileage: Int? = null,

    dataTypeId: Long? = null

) : VehicleStateDataType(dataTypeId) {

    override val predicateFieldProviderName: String = PREDICATE_FIELD_PROVIDER_NAME

    override val predicateFields: Map<String, PredicateField> = PREDICATE_FIELDS

    @Throws(IllegalArgumentException::class)
    override fun retrieveFieldValue(fieldName: String): Any? {
        return when (fieldName) {
            "status" -> this.status
            "dueDate" -> this.dueDate
            "remainingDays" -> this.remainingDays
            "remainingMileage" -> this.remainingMileage
            else -> super.retrieveFieldValue(fieldName)
        }
    }

    // Autogenerated
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is VehicleStateDataTypeService) return false
        if (!super.equals(other)) return false

        if (status != other.status) return false
        if (dueDate != other.dueDate) return false
        if (remainingDays != other.remainingDays) return false
        if (remainingMileage != other.remainingMileage) return false
        if (predicateFieldProviderName != other.predicateFieldProviderName) return false
        if (predicateFields != other.predicateFields) return false

        return true
    }

    // Autogenerated
    override fun hashCode(): Int {
        var result = super.hashCode()
        result = 31 * result + (status?.hashCode() ?: 0)
        result = 31 * result + (dueDate?.hashCode() ?: 0)
        result = 31 * result + (remainingDays ?: 0)
        result = 31 * result + (remainingMileage ?: 0)
        result = 31 * result + predicateFieldProviderName.hashCode()
        result = 31 * result + predicateFields.hashCode()
        return result
    }

    companion object {
        const val PREDICATE_FIELD_PROVIDER_NAME = "Service"
        val PREDICATE_FIELDS = mapOf(
            "status" to PredicateField("status", FieldDataType.TEXT, EvaluationStrategies.TEXT),
            "dueDate" to PredicateField("dueDate", FieldDataType.DATE, EvaluationStrategies.NUMERIC),
            "remainingDays" to PredicateField("remainingDays", FieldDataType.DAY, EvaluationStrategies.NUMERIC),
            "remainingMileage" to PredicateField("remainingMileage", FieldDataType.KILOMETRE, EvaluationStrategies.NUMERIC)
        )
    }
}
