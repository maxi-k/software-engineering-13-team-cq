package de.unia.se.teamcq.vehiclestate.model

import de.unia.se.teamcq.ruleevaluation.model.EvaluationStrategies
import de.unia.se.teamcq.ruleevaluation.model.FieldDataType
import de.unia.se.teamcq.ruleevaluation.model.PredicateField
import org.springframework.stereotype.Component

@Component
// Constructor with (null)-default values for everything necessary for MapStruct
class VehicleStateDataTypeEngine(

    var power: Int? = null,

    var capacity: Int? = null,

    var chargingStatus: String? = null,

    var transmissionType: String? = null,

    dataTypeId: Long? = null

) : VehicleStateDataType(dataTypeId) {

    override val predicateFieldProviderName: String = PREDICATE_FIELD_PROVIDER_NAME

    override val predicateFields: Map<String, PredicateField> = PREDICATE_FIELDS

    @Throws(IllegalArgumentException::class)
    override fun retrieveFieldValue(fieldName: String): Any? {
        return when (fieldName) {
            "power" -> this.power
            "capacity" -> this.capacity
            "chargingStatus" -> this.chargingStatus
            "transmissionType" -> this.transmissionType
            else -> super.retrieveFieldValue(fieldName)
        }
    }

    // Autogenerated
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is VehicleStateDataTypeEngine) return false
        if (!super.equals(other)) return false

        if (power != other.power) return false
        if (capacity != other.capacity) return false
        if (chargingStatus != other.chargingStatus) return false
        if (transmissionType != other.transmissionType) return false
        if (predicateFieldProviderName != other.predicateFieldProviderName) return false
        if (predicateFields != other.predicateFields) return false

        return true
    }

    // Autogenerated
    override fun hashCode(): Int {
        var result = super.hashCode()
        result = 31 * result + (power ?: 0)
        result = 31 * result + (capacity ?: 0)
        result = 31 * result + (chargingStatus?.hashCode() ?: 0)
        result = 31 * result + (transmissionType?.hashCode() ?: 0)
        result = 31 * result + predicateFieldProviderName.hashCode()
        result = 31 * result + predicateFields.hashCode()
        return result
    }

    companion object {
        const val PREDICATE_FIELD_PROVIDER_NAME = "Engine"
        val PREDICATE_FIELDS = mapOf(
            "power" to PredicateField("power", FieldDataType.HORSEPOWER, EvaluationStrategies.NUMERIC),
            "capacity" to PredicateField("capacity", FieldDataType.CAPACITY, EvaluationStrategies.NUMERIC),
            "chargingStatus" to PredicateField("chargingStatus", FieldDataType.TEXT, EvaluationStrategies.TEXT),
            "transmissionType" to PredicateField("transmissionType", FieldDataType.TEXT, EvaluationStrategies.TEXT)
        )
    }
}
