buildscript {
    ext.kotlin_version = '1.3.10' // Required for Kotlin integration
    ext.spring_boot_version = '2.1.0.RELEASE'
    ext.postgres_version = '42.2.5'
    ext.gson_version = '2.8.5'
    ext.flyway_version = '5.2.4'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "gradle.plugin.com.palantir:jacoco-coverage:0.4.0"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.19"
        classpath 'io.swagger:swagger-codegen:2.4.1'
    }
}

apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: "kotlin-spring" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
apply plugin: 'org.springframework.boot'
apply plugin: "com.palantir.jacoco-coverage"
apply plugin: "kotlin-jpa"
apply plugin: "kotlin-kapt"
apply plugin: "net.ltgt.apt"
apply plugin: "net.ltgt.apt-idea"
apply plugin: "net.ltgt.apt-eclipse"
apply plugin: "idea"

group = 'de.unia.se'
version = "${version}"
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
    baseName = 'se13-teamcq'
    version = '0.1.0'
    manifest {
        attributes 'Main-Class': 'AnnotationProcessorKt'
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

sourceSets{
    main.java.srcDirs += 'src/main/kotlin/'
    main.java.srcDirs += 'build/generated/source/kapt/main'
    main.java.srcDirs += 'build/generated/source/apt/main'
    main.java.srcDirs += 'build/generated/source/kaptKotlin/main'
    test.java.srcDirs += 'src/test/kotlin/'
}

idea {
    module.generatedSourceDirs += file('build/generated/source/kapt')
    module.generatedSourceDirs += file('build/generated/source/apt')
    module.generatedSourceDirs += file('build/generated/source/kaptKotlin')
}

repositories {
    jcenter()
    google()
    mavenCentral()
}

configurations {
    ktlint
}

test {
    useJUnitPlatform()

    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-security:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-quartz:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version"
    compile "org.springframework.security:spring-security-test:4.1.3.RELEASE"
    compile "io.jsonwebtoken:jjwt:0.9.1"
    compile "com.google.code.gson:gson:$gson_version"
    compile "commons-validator:commons-validator:1.4.0"
    compile "org.flywaydb:flyway-core:$flyway_version"
    compile "org.apache.commons:commons-csv:1.5"
    compile "com.google.guava:guava:27.0.1-jre"

    compile "org.mapstruct:mapstruct-jdk8:1.2.0.Final"
    testCompile "org.mapstruct:mapstruct-jdk8:1.2.0.Final"

    runtime "org.postgresql:postgresql:$postgres_version"
    testCompile "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
    testCompile 'io.kotlintest:kotlintest-extensions-spring:3.1.10'
    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.1.7'
    testCompile "io.mockk:mockk:1.8.9"

    testCompile "com.h2database:h2:1.4.194"

    testCompile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "io.kotlintest:kotlintest-runner-junit5:3.1.7'"
    ktlint "com.github.shyiko:ktlint:0.29.0"

    kapt "org.mapstruct:mapstruct-processor:1.2.0.Final"
}

task resolveDependencies {
    doLast {
        configurations.testRuntimeClasspath.resolve()
    }
}

// Generate BMW MES API client
import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerSourceFile = 'src/main/resources/MES_Swagger.json'
def swaggerTargetFolder = 'build/generated/swagger'

task generateApi {
    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir/$swaggerTargetFolder")
        config.setLang('java')
        config.setAdditionalProperties([
                'apiPackage'  : 'de.bmw.mes.api',
                'modelPackage': 'de.bmw.mes.model',
                'library'     : 'resttemplate'
        ])
        config.setSystemProperties([
                'models'         : '',
                'apis'           : '',
                'apiDocs'        : 'false',
                'modelDocs'      : 'false',
                'supportingFiles': 'ApiClient.java,Authentication.java,HttpBasicAuth.java,ApiKeyAuth.java,OAuth.java,CustomInstantDeserializer.java,RFC3339DateFormat.java,README.md'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

compileJava.dependsOn generateApi

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // To generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

// To run ktlint during the build (and fail when appropriate)
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7 // FIXME: We should get this up to at least 0.9 as soon as possible
            }
        }
    }
}

// To run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification

// For the pre-push hook
apply from: rootProject.file('gradle/install-git-hooks.gradle')
