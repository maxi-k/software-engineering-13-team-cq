spring.profiles.active=dev

## Hibernate Properties

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# Colored console logging
spring.output.ansi.enabled = ALWAYS
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
# https://github.com/pranavpr/kotlin-spring-boot-hibernate-postgresql-rest-api/commit/1a5c0b859fa66a5d4e867bb568f4a8db922830cd
# spring.cache.type=redis
# spring.redis.host=localhost
# spring.redis.port=6379

## Our own properties

# Variables configuring the mock service which
# sends mocked status updates to the application
de.unia.se.teamcq.mock.status.enable=false
# Number of milliseconds to use as an interval
# for sending mocked values
de.unia.se.teamcq.mock.status.interval=1000

# Map path to auth service
de.unia.se.teamcq.routes.auth-service.path=/auth/**
de.unia.se.teamcq.routes.auth-service.service-id=AUTH-SERVICE

# By default, all requests to gallery service for example will start with: "/gallery/"
# What will be sent to the gallery service is what comes after the path defined,
# So, if request is "/gallery/view/1", gallery service will get "/view/1".
# In case of auth, we need to pass the "/auth/" in the path to auth service. So, set strip-prefix to false
de.unia.se.teamcq.routes.auth-service.strip-prefix=false

# Exclude authorization from sensitive headers
de.unia.se.teamcq.routes.auth-service.sensitive-headers=Cookie,Set-Cookie   