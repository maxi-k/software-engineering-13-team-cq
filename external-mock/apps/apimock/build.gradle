buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'apimock'
    version =  ''
}

repositories {
    mavenCentral()
}

sourceCompatibility = 10
targetCompatibility = 10

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation("org.springframework.boot:spring-boot-starter-json")
    implementation("org.hibernate.validator:hibernate-validator")
    implementation("javax.servlet:javax.servlet-api")  // SecurityConfig needs javax.servlet

    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.cloud:spring-cloud-starter-oauth2") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation('javax.xml.bind:jaxb-api')

    implementation("org.springframework.boot:spring-boot-starter-jetty")
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("org.glassfish.jaxb:jaxb-core:2.3.0.1")
    implementation("org.glassfish.jaxb:jaxb-runtime:2.3.0.1")
    implementation("javax.activation:activation:1.1.1")
    implementation('org.webjars:webjars-locator:0.34')
    implementation("org.webjars:swagger-ui:3.18.2")
    implementation("org.springframework.security:spring-security-jwt:1.0.9.RELEASE")

    implementation("org.springframework:spring-core")
    implementation("org.springframework:spring-web")
    implementation("org.springframework:spring-webmvc")
    implementation("org.springframework.security:spring-security-web")
    implementation("org.springframework.security.oauth:spring-security-oauth2")
    implementation("javax.servlet:javax.servlet-api")
    implementation("org.hibernate.validator:hibernate-validator")
    implementation("org.springframework.boot:spring-boot")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("com.fasterxml.jackson.core:jackson-annotations")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("io.swagger.parser.v3:swagger-parser:2.0.2")

    implementation('com.atlassian.oai:swagger-request-validator-springmvc:2.0.0')
    implementation("net.sf.jmimemagic:jmimemagic:0.1.3")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('com.atlassian.oai:swagger-request-validator-mockmvc:2.0.0')
    testCompileOnly("org.springframework.boot:spring-boot-starter-data-jpa")
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: "junit"
    }
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('com.atlassian.oai:swagger-request-validator-mockmvc:2.0.0')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.mockito:mockito-junit-jupiter:2.19.1')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('com.jayway.jsonpath:json-path')

    compileOnly("org.springframework.boot:spring-boot-devtools")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"

        dependencies {
            dependency("org.springframework.security.oauth:spring-security-oauth2:2.3.4.RELEASE")
            dependency("commons-io:commons-io:2.6")
        }
    }
}

task resolveDependencies {
    doLast {
        configurations.testRuntimeClasspath.resolve()
    }
}

test {
    useJUnitPlatform()
}
