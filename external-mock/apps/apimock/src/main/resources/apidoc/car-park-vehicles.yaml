openapi: "3.0.1"
info:
  version: 1.0.0
  title: BMWFD Car Park - Vehicles
  description: BMW FleetData Car Park Vehicle Management API
servers:
  - url: /api
paths:
  /car-parks/{carParkId}/vehicles:
    parameters:
      - name: carParkId
        in: path
        description: ID of car park
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: |
        Returns all vehicles for a given car park
      tags:
        - vehicles
      operationId: getAllVehicles
      responses:
        '200':
          description: vehicle response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/Vehicle'
            text/csv:
              schema:
                type: string
        default:
          $ref: 'error.yaml#/components/responses/Error'
    post:
      description: Creates a new vehicle in a car park
      parameters:
        - name: fleet
          in: query
          description: ID of a fleet. Assigns all uploaded vehicles to this fleet. Only for CSV upload.
          required: false
          schema:
            type: string
            format: uuid
      tags:
        - vehicles
      operationId: createVehicle
      requestBody:
        description: Vehicle to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: car park response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '202':
          description: The CSV has been accepted for further processing
        '400':
          description: error in CSV file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSVError'
        default:
          $ref: 'error.yaml#/components/responses/Error'
    patch:
      description: updates a bulk of vehicles in a car park
      tags:
        - vehicles
      operationId: bulkUpdateVehicles
      requestBody:
        description: Patch to apply
        required: true
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: object
                properties:
                  op:
                    type: string
                  path:
                    type: string
                  value:
                    type: string
      responses:
        '200':
          description: patch applied
        default:
          $ref: 'error.yaml#/components/responses/Error'
  /car-parks/{carParkId}/vehicles/template:
    get:
      description: get CSV template for vehicle upload
      tags:
        - vehicles
      responses:
        '200':
          description: vehicle CSV template
          content:
            text/csv:
              schema:
                type: string
  /car-parks/{carParkId}/vehicles/{vin}:
    parameters:
      - name: carParkId
        in: path
        description: ID of car park
        required: true
        schema:
          type: string
          format: uuid
      - name: vin
        in: path
        description: Vehicle identification number
        required: true
        schema:
          type: string
    get:
      description: Returns a vehicle based on a single VIN
      tags:
        - vehicles
      operationId: getVehicleByVIN
      responses:
        '200':
          description: vehicle response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        default:
          $ref: 'error.yaml#/components/responses/Error'
    put:
      description: Updates a vehicle based on a single VIN
      tags:
        - vehicles
      operationId: updateVehicle
      requestBody:
        description: Vehicle to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: vehicle response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        default:
          $ref: 'error.yaml#/components/responses/Error'
    delete:
      description: deletes a single vehicle based on the VIN supplied
      tags:
        - vehicles
      operationId: deleteVehicle
      responses:
        '200':
          description: vehicle deleted
        default:
          $ref: 'error.yaml#/components/responses/Error'
components:
  schemas:
    Contract:
      properties:
        startMileage:
          type: integer
          minimum: 0
        startDate:
          type: string
          format: date
        endMileage:
          type: integer
          minimum: 1
        endDate:
          type: string
          format: date
    Vehicle:
      required:
        - vin
      properties:
        vin:
          type: string
        carPark:
          type: string
          format: uuid
        fleet:
          type: string
          format: uuid
        image:
          type: string
        brand:
          type: string
        model:
          type: string
        licensePlate:
          type: string
        note:
          type: string
        contract:
          $ref: '#/components/schemas/Contract'
        fleetIn:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        usersWithReadPermission:
          type: array
          description: 'Is only returned if called with ?expand=usersWithReadPermission'
          items:
            type: string
    CSVError:
      # unfortunately the openapi / json schema inheritance construct using allOff has severe limitations - so we don't use it here
      # see https://stackoverflow.com/questions/22689900/json-schema-allof-with-additionalproperties
      properties:
        statusCode:
          type: integer
          format: int32
        requestUrl:
          type: string
        requestTimestamp:
          type: integer
          format: int64
        logTransactionId:
          type: string
        logErrorId:
          type: string
        logMessage:
          type: string
        rows:
          type: array
          items:
            type: object
            properties:
              vin:
                type: string
              rowNumber:
                type: integer
                format: int32
              errors:
                type: array
                items:
                  type: object
                  properties:
                    column:
                      type: string
                    error:
                      type: string
        missingFields:
          type: array
          items:
            type: string